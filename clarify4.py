# -*- coding: utf-8 -*-
"""clarify4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1disRTlXfNBw_1uONG8crGC90NFAUrH7x
"""

import matplotlib.pyplot as plt

x1 = [1,2,3,4,5,6,7,8,9]
x2 = [6,7,8,9,9,10,11,12,13]
y1 = [1,3,5,3,1,3,5,3,1]
y2 = [2,4,6,4,2,4,6,4,2]

plt.bar(x1,y1,label='Empresa 1', color='b')
plt.bar(x2,y2,label='Empresa 2', color='g')
plt.legend()
plt.show()

import numpy as np
import pandas as pd
import plotly.express as px

df= pd.read_csv ("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv")
df.head()

df.tail()

df_agrupado_pelo_dia = df.groupby('day',sort=False).agg({'total_bill': np.sum}).reset_index()
df_agrupado_pelo_dia

px.bar(df_agrupado_pelo_dia, x='day', y = 'total_bill')

px.scatter(df, x='total_bill', y= 'tip', color = 'day', hover_name='sex')

quantidade_pedidos_por_dia = df['day'].value_counts()
quantidade_pedidos_por_dia

quantidade_pedidos_por_dia.index

quantidade_pedidos_por_dia.values

px.pie(names=quantidade_pedidos_por_dia.index,
       values=quantidade_pedidos_por_dia.values)

"""**Trabalhando com Banco de Dados"""

import sqlite3

conn = sqlite3.connect('lala.db')
print("Conex√£o aberta!")

conn.execute('''
CREATE TABLE IF NOT EXISTS aluno (
  matricula integer PRIMARY KEY AUTOINCREMENT,
  nome string,
  nota integer
);
''')

conn.commit()

print("Tabela criada com sucesso!");

conn.execute("INSERT INTO aluno VALUES(12, 'Malu', 5);")
conn.execute("INSERT INTO aluno VALUES(14, 'Bruno', 4);")
conn.execute("INSERT INTO aluno VALUES(20, 'Daniel', 7);")
conn.execute("INSERT INTO aluno VALUES(8, 'Enzo', 3);")
conn.execute("INSERT INTO aluno VALUES(9, 'Marcella', 3);")

conn.commit()
print('Dados Incluidos!!!')

alunos_encontrados = conn.execute('''
SELECT nome, nota
From aluno;
''')

for linha in alunos_encontrados:
  print(linha)

#import panda as pd (ja foi chamado em cima)
alunos_localizados = ''' SELECT * FROM aluno '''
df = pd.read_sql_query(alunos_localizados, conn)
df

conn.close()

df

from requests import get
from bs4 import BeautifulSoup
from warnings import warn
from time import sleep
from random import randint
import numpy as np, pandas as pd
import seaborn as plt

pages = np.arange(1, 5, 50)
headers = {'Accept-Language': 'pt-BR,pt;q=0.8'}
titles = []
years = []
genres = []
runtimes = []
imdb_ratings = []
imdb_ratings = []
imdb_ratings_standardized = []
votes = []
ratings = []

for page in pages:
  response = get("https://www.imdb.com/search/title?genres=sci-fi&" + "start=" + str(page) + "&explore=title_type,genres&ref_=adv_prv", headers=headers)

  sleep(randint(8,15))
  if response.status_code != 200:
    warn("Muito errado: {}: Status code: {}".format(requests, response.status_code))
    page_html = BeautifulSoup(response.text, 'html.parser')

    movie_containers = page_html.find_all('div', class_= 'lister-item mode-advanced')
    for container in movie_containers:  
      if container.find('div', class_= 'ratings-metascore') is not None:
        title = container.h3.a.text
        titles.append(title)

        if container.h3.find('span', class_= 'lister-item text-muted unbold') is not None:
          year = container.h3.find('span', class_= 'lister-item-year text-muted unbold').text
          years.append(year)

        else:
          year.append(None)

        if container.p.find('span', class_ = 'certificate') is not None:
          rating = container.p.find('span', class_= 'certificate').text
          ratings.append(rating)

        else:
          ratings.append("")

        if container.p.find('span', class_ = 'genre') is not None:
          genre = container.p.find('span', class_='genre').text.replace("\n","").rstrip().split('.')
          genres.append(genre)

        else:
          genres.append("")

        if container.p.find('span', class_ = 'runtime') is not None:
          time = int(container.p.find('span',class_= 'runtime').text.replace("min",""))
          runtimes.append(time)
        
        else:
          runtimes.append(None)

        if container.strong.text is not None:
          imdb = float(container.strong.text.replace(",","."))
          imdb_ratings.append(imdb)

        else:
          imdb_ratings.append(None)

        if container.find('span', attrs = {'name':'nv'})['data-value'] is not None:
          vote = int(container.find('span', attrs = {'name':'nv'})['data-value'])
          votes.append(vote)
        
        else:
          votes.append(None)

sci_fi_df= pd.DataFrame({'filme': titles,
                         'ano': years,
                         'genero': genres,
                         'tempo': runtimes,
                         'imdb': imdb_ratings,
                         'votos': votes}
                        )
sci_fi_df.loc[:, 'ano'] = sci_fi_df['ano'].str[-5:-1]
sci_fi_df['n_imdb'] = sci_fi_df['imdb'] * 10
final_df = sci_fi_df.loc[sci_fi_df['ano']!= 'Movie']
final_df.loc[:,'ano'] = pd.to_numeric(final_df['ano'])